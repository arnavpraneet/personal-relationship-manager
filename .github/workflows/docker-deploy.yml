name: Docker Build and Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_DIR: personal-relationship-manager

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          builder: ${{ steps.buildx.outputs.name }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "
            # Navigate to the deployment directory
            cd ${{ env.DEPLOY_DIR }}
            
            # Ensure we're using the correct docker-compose file
            if [ -f docker-compose.yaml ]; then
              echo 'Using docker-compose.yaml'
            else
              echo 'Error: docker-compose.yaml not found'
              exit 1
            fi
            
            # Backup existing .env.docker if it exists
            if [ -f .env.docker ]; then
              cp .env.docker .env.docker.backup
            fi
            
            # Pull the latest image
            echo 'Pulling latest image...'
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove existing containers
            echo 'Stopping existing containers...'
            docker compose -f docker-compose.yaml down
            
            # Update .env.docker with original variables
            echo 'Creating environment files...'
            echo 'POSTGRES_USER=${{ secrets.POSTGRES_USER }}' > .env.docker
            echo 'POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' >> .env.docker
            echo 'POSTGRES_DB=${{ secrets.POSTGRES_DB }}' >> .env.docker
            
            # Create a temporary .env file for the app with correct DATABASE_URL
            echo 'DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}?schema=public' > .env
            echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> .env
            
            # Verify environment files exist
            echo 'Verifying environment files...'
            if [ -f .env.docker ] && [ -f .env ]; then
              echo 'Environment files created successfully'
            else
              echo 'Error: Environment files not created'
              exit 1
            fi
            
            # Start the containers with explicit env file
            echo 'Starting containers...'
            docker compose -f docker-compose.yaml --env-file .env.docker up -d --build
            
            # Wait for database to be ready
            echo 'Waiting for database to be ready...'
            sleep 10
            
            # Verify containers are running
            echo 'Checking container status...'
            docker compose -f docker-compose.yaml ps
            
            # Check container logs
            echo 'Checking container logs...'
            docker compose -f docker-compose.yaml logs
          " 